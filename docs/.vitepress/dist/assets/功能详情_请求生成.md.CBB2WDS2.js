import{_ as p,C as r,c as d,o as h,j as i,G as n,ao as t,a,w as l}from"./chunks/framework.DuPVQoDA.js";const F=JSON.parse('{"title":"请求生成","description":"","frontmatter":{},"headers":[],"relativePath":"功能详情/请求生成.md","filePath":"功能详情/请求生成.md","lastUpdated":1740102425000}'),k={name:"功能详情/请求生成.md"};function u(c,s,g,E,b,m){const o=r("CustomTOC"),e=r("VPNolebaseInlineLinkPreview");return h(),d("div",null,[s[52]||(s[52]=i("h1",{id:"请求生成",tabindex:"-1"},[a("请求生成 "),i("a",{class:"header-anchor",href:"#请求生成","aria-label":'Permalink to "请求生成"'},"​")],-1)),s[53]||(s[53]=i("p",null,"前端助手提供了函数用于更加灵活地请求 AI 生成回复，你可以通过它来自定义生成时要采用的提示词配置。",-1)),s[54]||(s[54]=i("div",{class:"warning custom-block"},[i("p",{class:"custom-block-title"},"注意"),i("p",null,[a("目前仅支持聊天补全（"),i("code",null,"Chat Completion"),a("）。")])],-1)),n(o),s[55]||(s[55]=t('<h2 id="generate" tabindex="-1">generate <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;generate&quot;">​</a></h2><p>使用 Silly Tavern 当前启用的预设，让 AI 生成一段文本。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GenerateConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><h4 id="user-input" tabindex="-1"><code>user_input?</code> <a class="header-anchor" href="#user-input" aria-label="Permalink to &quot;`user_input?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 用户输入</li></ul><h4 id="should-stream" tabindex="-1"><code>should_stream?</code> <a class="header-anchor" href="#should-stream" aria-label="Permalink to &quot;`should_stream?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>描述</strong>: 是否启用流式传输；默认为 <code>false</code></li></ul><h4 id="image" tabindex="-1"><code>image?</code> <a class="header-anchor" href="#image" aria-label="Permalink to &quot;`image?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>File|string</code></li><li><strong>描述</strong>: 图片输入，支持以下格式： <ul><li><code>File</code> 对象：通过 <code>input[type=&quot;file&quot;]</code> 获取的文件对象</li><li><code>Base64</code> 字符串：图片的 base64 编码</li><li><code>URL</code> 字符串：图片的在线地址</li></ul></li></ul><h4 id="overrides" tabindex="-1"><code>overrides?</code> <a class="header-anchor" href="#overrides" aria-label="Permalink to &quot;`overrides?`&quot;">​</a></h4>',11)),i("ul",null,[s[7]||(s[7]=i("li",null,[i("strong",null,"类型"),a(": "),i("code",null,"Overrides")],-1)),i("li",null,[s[1]||(s[1]=i("strong",null,"描述",-1)),s[2]||(s[2]=a(": 覆盖选项。若设置, 则 ")),s[3]||(s[3]=i("code",null,"overrides",-1)),s[4]||(s[4]=a(" 中给出的字段将会覆盖对应的提示词。如 ")),s[5]||(s[5]=i("code",null,"overrides.char_description = '覆盖的角色描述';",-1)),s[6]||(s[6]=a(" 将会覆盖角色描述。具体见")),n(e,{href:"./请求生成.html#overrides-1"},{default:l(()=>s[0]||(s[0]=[a("Overrides 参数详情")])),_:1})])]),s[56]||(s[56]=i("h4",{id:"injects",tabindex:"-1"},[i("code",null,"injects?"),a(),i("a",{class:"header-anchor",href:"#injects","aria-label":'Permalink to "`injects?`"'},"​")],-1)),i("ul",null,[s[11]||(s[11]=i("li",null,[i("strong",null,"类型"),a(": "),i("code",null,"InjectionPrompt[]")],-1)),i("li",null,[s[9]||(s[9]=i("strong",null,"描述",-1)),s[10]||(s[10]=a(": 要额外注入的提示词，具体见")),n(e,{href:"./请求生成.html#injectionprompt"},{default:l(()=>s[8]||(s[8]=[a("InjectionPrompt 参数详情")])),_:1})])]),s[57]||(s[57]=t(`<h4 id="max-chat-history" tabindex="-1"><code>max_chat_history?</code> <a class="header-anchor" href="#max-chat-history" aria-label="Permalink to &quot;\`max_chat_history?\`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>&#39;all&#39;|number</code></li><li><strong>描述</strong>: 最多使用多少条聊天历史</li></ul><h3 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><ul><li><strong>生成的最终文本</strong>: <code>string</code></li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-WdR0H" id="tab-GuSDzCw" checked><label data-title="流式生成" for="tab-GuSDzCw">流式生成</label><input type="radio" name="group-WdR0H" id="tab-Ul0Q46e"><label data-title="图片输入" for="tab-Ul0Q46e">图片输入</label><input type="radio" name="group-WdR0H" id="tab-Sytz1_n"><label data-title="注入、覆盖提示词" for="tab-Sytz1_n">注入、覆盖提示词</label></div><div class="blocks"><div class="language-typescript vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ user_input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, should_stream: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user_input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你好&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  image: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user_input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  injects: [{ role: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;system&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;思维链...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, position: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;in_chat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, depth: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, should_scan: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  overrides: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    char_personality: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;温柔&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    world_info_before: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chat_history: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      prompts: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div></div><h2 id="generateraw" tabindex="-1">generateRaw <a class="header-anchor" href="#generateraw" aria-label="Permalink to &quot;generateRaw&quot;">​</a></h2><p>不使用 SillyTavern 当前启用的预设，让 AI 生成一段文本。</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GenerateConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="参数-1" tabindex="-1">参数 <a class="header-anchor" href="#参数-1" aria-label="Permalink to &quot;参数&quot;">​</a></h3><h4 id="user-input-1" tabindex="-1"><code>user_input?</code> <a class="header-anchor" href="#user-input-1" aria-label="Permalink to &quot;\`user_input?\`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 如果设置，则无论 ordered_prompts 中是否有 <code>user_input</code> 都会加入该用户输入提示词；默认加入在 <code>chat_history</code> 末尾。</li></ul><h4 id="should-stream-1" tabindex="-1"><code>should_stream?</code> <a class="header-anchor" href="#should-stream-1" aria-label="Permalink to &quot;\`should_stream?\`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>描述</strong>: 是否启用流式传输；默认为 <code>false</code></li></ul><h4 id="image-1" tabindex="-1"><code>image?</code> <a class="header-anchor" href="#image-1" aria-label="Permalink to &quot;\`image?\`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>File|string</code></li><li><strong>描述</strong>: 图片输入，支持以下格式： <ul><li><code>File</code> 对象：通过 <code>input[type=&quot;file&quot;]</code> 获取的文件对象</li><li><code>Base64</code> 字符串：图片的 base64 编码</li><li><code>URL</code> 字符串：图片的在线地址</li></ul></li></ul><h4 id="overrides-1" tabindex="-1"><code>overrides?</code> <a class="header-anchor" href="#overrides-1" aria-label="Permalink to &quot;\`overrides?\`&quot;">​</a></h4>`,17)),i("ul",null,[s[19]||(s[19]=i("li",null,[i("strong",null,"类型"),a(": "),i("code",null,"Overrides")],-1)),i("li",null,[s[13]||(s[13]=i("strong",null,"描述",-1)),s[14]||(s[14]=a(": 覆盖选项。若设置, 则 ")),s[15]||(s[15]=i("code",null,"overrides",-1)),s[16]||(s[16]=a(" 中给出的字段将会覆盖对应的提示词。如 ")),s[17]||(s[17]=i("code",null,"overrides.char_description = '覆盖的角色描述';",-1)),s[18]||(s[18]=a(" 将会覆盖角色描述。具体见")),n(e,{href:"./请求生成.html#overrides-1"},{default:l(()=>s[12]||(s[12]=[a("Overrides 参数详情")])),_:1})])]),s[58]||(s[58]=i("h4",{id:"injects-1",tabindex:"-1"},[i("code",null,"injects?"),a(),i("a",{class:"header-anchor",href:"#injects-1","aria-label":'Permalink to "`injects?`"'},"​")],-1)),i("ul",null,[s[23]||(s[23]=i("li",null,[i("strong",null,"类型"),a(": "),i("code",null,"InjectionRawPrompt[]")],-1)),i("li",null,[s[21]||(s[21]=i("strong",null,"描述",-1)),s[22]||(s[22]=a(": 要额外注入的提示词，具体见")),n(e,{href:"./请求生成.html#injectionrawprompt"},{default:l(()=>s[20]||(s[20]=[a("InjectionRawPrompt 参数详情")])),_:1})])]),s[59]||(s[59]=t('<h4 id="max-chat-history-1" tabindex="-1"><code>max_chat_history?</code> <a class="header-anchor" href="#max-chat-history-1" aria-label="Permalink to &quot;`max_chat_history?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>&#39;all&#39;|number</code></li><li><strong>描述</strong>: 最多使用多少条聊天历史</li></ul><h4 id="ordered-prompts" tabindex="-1"><code>ordered_prompts?</code> <a class="header-anchor" href="#ordered-prompts" aria-label="Permalink to &quot;`ordered_prompts?`&quot;">​</a></h4>',3)),i("ul",null,[s[34]||(s[34]=i("li",null,[i("strong",null,"类型"),a(": "),i("code",null,"(BuiltinPrompt | RolePrompt)[]")],-1)),i("li",null,[s[32]||(s[32]=i("strong",null,"描述",-1)),s[33]||(s[33]=a(": 一个提示词数组，数组元素将会按顺序发给 ai，因而相当于自定义预设。该数组允许存放两种类型： ")),i("ul",null,[i("li",null,[n(e,{href:"./请求生成.html#builtinprompt"},{default:l(()=>s[24]||(s[24]=[i("code",null,"BuiltinPrompt",-1)])),_:1}),s[26]||(s[26]=a(': 内置提示词。由于不使用预设, 如果需要 "角色描述" 等提示词, 你需要自己指定需要使用哪些并给出顺序。如果不想自己指定, 函数会自行使用 ')),s[27]||(s[27]=i("code",null,"builtin_prompt_default_order",-1)),s[28]||(s[28]=a(" 中的酒馆默认预设顺序（但对于这种情况，你也许更应该用 ")),n(e,{href:"./请求生成.html#generate"},{default:l(()=>s[25]||(s[25]=[i("code",null,"generate",-1)])),_:1}),s[29]||(s[29]=a("）。"))]),i("li",null,[n(e,{href:"./请求生成.html#roleprompt"},{default:l(()=>s[30]||(s[30]=[i("code",null,"RolePrompt",-1)])),_:1}),s[31]||(s[31]=a(": 要额外给定的提示词。"))])])])]),s[60]||(s[60]=t('<h3 id="返回值-1" tabindex="-1">返回值 <a class="header-anchor" href="#返回值-1" aria-label="Permalink to &quot;返回值&quot;">​</a></h3><ul><li><strong>生成的最终文本</strong>: <code>string</code></li></ul><h3 id="示例-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义内置提示词顺序, 未在 ordered_prompts 中给出的将不会被使用</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  user_input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;你好&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ordered_prompts: [</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;char_description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { role: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;system&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;系统提示&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;chat_history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;user_input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="通过事件获取生成结果" tabindex="-1">通过事件获取生成结果 <a class="header-anchor" href="#通过事件获取生成结果" aria-label="Permalink to &quot;通过事件获取生成结果&quot;">​</a></h2><h3 id="函数的事件发送" tabindex="-1">函数的事件发送 <a class="header-anchor" href="#函数的事件发送" aria-label="Permalink to &quot;函数的事件发送&quot;">​</a></h3><p>该函数在执行过程中将会发送以下事件:</p><ul><li><code>iframe_events.GENERATION_STARTED</code>：生成开始</li><li>若启用流式传输, <code>iframe_events.STREAM_TOKEN_RECEIVED_FULLY</code>：监听它可以得到流式传输的当前完整文本 (&quot;这是&quot;, &quot;这是一条&quot;, &quot;这是一条流式传输&quot;)</li><li>若启用流式传输, <code>iframe_events.STREAM_TOKEN_RECEIVED_INCREMENTALLY</code>：监听它可以得到流式传输的当前增量文本 (&quot;这是&quot;, &quot;一条&quot;, &quot;流式传输&quot;)</li><li><code>iframe_events.GENERATION_ENDED</code>：生成结束, 监听它可以得到生成的最终文本 (当然也能通过函数返回值获得)</li></ul><h3 id="示例-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h3><h2 id="参数详情" tabindex="-1">参数详情 <a class="header-anchor" href="#参数详情" aria-label="Permalink to &quot;参数详情&quot;">​</a></h2><h3 id="overrides-2" tabindex="-1"><code>Overrides</code> <a class="header-anchor" href="#overrides-2" aria-label="Permalink to &quot;`Overrides`&quot;">​</a></h3><h4 id="world-info-before" tabindex="-1"><code>world_info_before?</code> <a class="header-anchor" href="#world-info-before" aria-label="Permalink to &quot;`world_info_before?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 世界书(角色定义前)</li></ul><h4 id="persona-description" tabindex="-1"><code>persona_description?</code> <a class="header-anchor" href="#persona-description" aria-label="Permalink to &quot;`persona_description?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 用户描述</li></ul><h4 id="char-description" tabindex="-1"><code>char_description?</code> <a class="header-anchor" href="#char-description" aria-label="Permalink to &quot;`char_description?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 角色描述</li></ul><h4 id="char-personality" tabindex="-1"><code>char_personality?</code> <a class="header-anchor" href="#char-personality" aria-label="Permalink to &quot;`char_personality?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 角色性格</li></ul><h4 id="scenario" tabindex="-1"><code>scenario?</code> <a class="header-anchor" href="#scenario" aria-label="Permalink to &quot;`scenario?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 场景</li></ul><h4 id="world-info-after" tabindex="-1"><code>world_info_after?</code> <a class="header-anchor" href="#world-info-after" aria-label="Permalink to &quot;`world_info_after?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 世界书(角色定义后)</li></ul><h4 id="dialogue-examples" tabindex="-1"><code>dialogue_examples?</code> <a class="header-anchor" href="#dialogue-examples" aria-label="Permalink to &quot;`dialogue_examples?`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 对话示例</li></ul><h4 id="chat-history" tabindex="-1"><code>chat_history?</code> <a class="header-anchor" href="#chat-history" aria-label="Permalink to &quot;`chat_history?`&quot;">​</a></h4>',26)),i("ul",null,[s[42]||(s[42]=i("li",null,[i("strong",null,"类型"),a(": "),i("code",null,"{with_depth_entries?: boolean, author_note?: string; prompts?: RolePrompt[];}")],-1)),i("li",null,[s[40]||(s[40]=i("strong",null,"描述",-1)),s[41]||(s[41]=a(": 聊天历史，其中 ")),i("ul",null,[s[38]||(s[38]=i("li",null,[i("code",null,"with_depth_entries"),a(": 是否启用世界书中按深度插入的条目; 默认为 "),i("code",null,"true")],-1)),s[39]||(s[39]=i("li",null,[i("code",null,"author_note"),a(': 若设置, 覆盖 "作者注释" 为给定的字符串')],-1)),i("li",null,[s[36]||(s[36]=i("code",null,"prompts",-1)),s[37]||(s[37]=a(': 若设置, 覆盖 "聊天历史" 为给定的提示词，详见')),n(e,{href:"./请求生成.html#roleprompt"},{default:l(()=>s[35]||(s[35]=[a("RolePrompt 格式")])),_:1})])])])]),s[61]||(s[61]=t('<h3 id="injectionprompt" tabindex="-1"><code>InjectionPrompt</code> <a class="header-anchor" href="#injectionprompt" aria-label="Permalink to &quot;`InjectionPrompt`&quot;">​</a></h3><h4 id="role" tabindex="-1"><code>role</code> <a class="header-anchor" href="#role" aria-label="Permalink to &quot;`role`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>&#39;system&#39; | &#39;assistant&#39; | &#39;user&#39;</code></li><li><strong>描述</strong>: 角色</li></ul><h4 id="content" tabindex="-1"><code>content</code> <a class="header-anchor" href="#content" aria-label="Permalink to &quot;`content`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 要注入的提示词</li></ul><h4 id="position" tabindex="-1"><code>position</code> <a class="header-anchor" href="#position" aria-label="Permalink to &quot;`position`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>&#39;before_prompt&#39; | &#39;in_chat&#39; | &#39;after_prompt&#39; | &#39;none&#39;</code></li><li><strong>描述</strong>: 要注入的位置。<code>none</code> 不会发给 ai，但能用来激活世界书条目</li></ul><h4 id="depth" tabindex="-1"><code>depth</code> <a class="header-anchor" href="#depth" aria-label="Permalink to &quot;`depth`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>number</code></li><li><strong>描述</strong>: 深度</li></ul><h4 id="should-scan" tabindex="-1"><code>should_scan</code> <a class="header-anchor" href="#should-scan" aria-label="Permalink to &quot;`should_scan`&quot;">​</a></h4><ul><li><p><strong>类型</strong>: <code>boolean</code></p></li><li><p><strong>描述</strong>: 是否要加入世界书扫描中</p></li></ul><h3 id="injectionrawprompt" tabindex="-1"><code>InjectionRawPrompt</code> <a class="header-anchor" href="#injectionrawprompt" aria-label="Permalink to &quot;`InjectionRawPrompt`&quot;">​</a></h3><h4 id="role-1" tabindex="-1"><code>role</code> <a class="header-anchor" href="#role-1" aria-label="Permalink to &quot;`role`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>&#39;system&#39; | &#39;assistant&#39; | &#39;user&#39;</code></li><li><strong>描述</strong>: 角色</li></ul><h4 id="content-1" tabindex="-1"><code>content</code> <a class="header-anchor" href="#content-1" aria-label="Permalink to &quot;`content`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 要注入的提示词</li></ul><h4 id="position-1" tabindex="-1"><code>position</code> <a class="header-anchor" href="#position-1" aria-label="Permalink to &quot;`position`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>&#39;in_chat&#39; | &#39;none&#39;</code></li><li><strong>描述</strong>: 要注入的位置。<code>none</code> 不会发给 ai，但能用来激活世界书条目</li></ul><h4 id="depth-1" tabindex="-1"><code>depth</code> <a class="header-anchor" href="#depth-1" aria-label="Permalink to &quot;`depth`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>number</code></li><li><strong>描述</strong>: 深度</li></ul><h4 id="should-scan-1" tabindex="-1"><code>should_scan</code> <a class="header-anchor" href="#should-scan-1" aria-label="Permalink to &quot;`should_scan`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>boolean</code></li><li><strong>描述</strong>: 是否要加入世界书扫描中</li></ul><h3 id="roleprompt" tabindex="-1"><code>RolePrompt</code> <a class="header-anchor" href="#roleprompt" aria-label="Permalink to &quot;`RolePrompt`&quot;">​</a></h3><h4 id="role-2" tabindex="-1"><code>role</code> <a class="header-anchor" href="#role-2" aria-label="Permalink to &quot;`role`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>&#39;system&#39; | &#39;assistant&#39; | &#39;user&#39;</code></li><li><strong>描述</strong>: 角色</li></ul><h4 id="content-2" tabindex="-1"><code>content</code> <a class="header-anchor" href="#content-2" aria-label="Permalink to &quot;`content`&quot;">​</a></h4><ul><li><strong>类型</strong>: <code>string</code></li><li><strong>描述</strong>: 提示词内容</li></ul><h3 id="builtinprompt" tabindex="-1"><code>BuiltinPrompt</code> <a class="header-anchor" href="#builtinprompt" aria-label="Permalink to &quot;`BuiltinPrompt`&quot;">​</a></h3><p>不指定 <code>ordered_prompts</code> 时，将使用以下默认顺序排列提示词：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> builtin_prompt_default_order</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BuiltinPrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;world_info_before&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 世界书(角色定义前)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;persona_description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用户描述</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;char_description&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 角色描述</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;char_personality&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 角色性格</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;scenario&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 场景</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;world_info_after&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 世界书(角色定义后)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;dialogue_examples&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 对话示例</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;chat_history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 聊天历史 (含世界书中按深度插入的条目、作者注释)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;user_input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用户输入</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>仅以下字符串可被 <code>generateRaw</code> 识别：</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BuiltinPrompt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;world_info_before&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 世界书(角色定义前)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;persona_description&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 用户描述</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;char_description&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 角色描述</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;char_personality&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 角色性格</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;scenario&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 场景</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;world_info_after&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 世界书(角色定义后)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;dialogue_examples&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 对话示例</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;chat_history&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 聊天历史 (含世界书中按深度插入的条目、作者注释)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user_input&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 用户输入</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong><code>user_input</code>与<code>chat_history</code>的关系：</strong></p>',33)),i("p",null,[s[44]||(s[44]=a("在")),n(e,{href:"./请求生成.html#generateRaw"},{default:l(()=>s[43]||(s[43]=[i("code",null,"generateRaw",-1)])),_:1}),s[45]||(s[45]=a("中，")),s[46]||(s[46]=i("code",null,"user_input",-1)),s[47]||(s[47]=a("可以自由选择放置的位置了。关于")),s[48]||(s[48]=i("code",null,"user_input",-1)),s[49]||(s[49]=a("和")),s[50]||(s[50]=i("code",null,"chat_history",-1)),s[51]||(s[51]=a("的关系如下："))]),s[62]||(s[62]=t("<p>当<code>chat_history</code>不在<code>ordered_prompts</code>：</p><ul><li>如果<code>user_input</code>未在 <code>ordered_prompts</code> 中：将自动添加到所有提示词的最后面</li><li>如果<code>user_input</code>在 <code>ordered_prompts</code> 中：以<code>user_input</code>在 <code>ordered_prompts</code> 中的位置为准</li></ul><p>当<code>chat_history</code>在<code>ordered_prompts</code>时：</p><ul><li>如果<code>user_input</code>未在 <code>ordered_prompts</code> 中：将自动插入到最新一条聊天记录后</li><li>如果<code>user_input</code>在 <code>ordered_prompts</code> 中：<code>user_input</code>和<code>chat_history</code>会分别插入到 <code>ordered_prompts</code> 中指示的位置</li></ul>",4))])}const f=p(k,[["render",u]]);export{F as __pageData,f as default};
