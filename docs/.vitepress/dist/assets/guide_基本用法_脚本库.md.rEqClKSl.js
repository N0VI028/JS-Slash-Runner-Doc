import{_ as r,C as o,c as p,o as d,ao as s,j as a,a as l,G as e,w as t}from"./chunks/framework.RuhsIXye.js";const h="/JS-Slash-Runner-Doc/%E8%84%9A%E6%9C%AC%E5%BA%93.jpg",u="/JS-Slash-Runner-Doc/%E8%84%9A%E6%9C%AC%E7%BC%96%E8%BE%91.jpg",k="/JS-Slash-Runner-Doc/%E6%8C%89%E9%94%AE%E8%A7%A6%E5%8F%91.jpg",E="/JS-Slash-Runner-Doc/%E5%86%85%E7%BD%AE%E8%84%9A%E6%9C%AC%E5%BA%93.jpg",f=JSON.parse('{"title":"脚本库","description":"","frontmatter":{"order":2},"headers":[],"relativePath":"guide/基本用法/脚本库.md","filePath":"guide/基本用法/脚本库.md","lastUpdated":1745144654000}'),c={name:"guide/基本用法/脚本库.md"},m={class:"tip custom-block"};function b(_,i,g,S,A,v){const n=o("VPNolebaseInlineLinkPreview");return d(),p("div",null,[i[9]||(i[9]=s('<h1 id="脚本库" tabindex="-1">脚本库 <a class="header-anchor" href="#脚本库" aria-label="Permalink to &quot;脚本库&quot;">​</a></h1><p>脚本库是酒馆助手的核心功能之一，用于管理和执行自动化脚本，前身为全局脚本，现在具有更完整的管理和编辑功能。</p><p><img src="'+h+'" alt="脚本库示例"></p><h2 id="全局-局部脚本库" tabindex="-1">全局/局部脚本库 <a class="header-anchor" href="#全局-局部脚本库" aria-label="Permalink to &quot;全局/局部脚本库&quot;">​</a></h2><p>脚本库分为 全局脚本库 和 局部脚本库 两个部分，其中 全局脚本库 适用于酒馆所有聊天， 局部脚本库 适用于当前角色卡。</p><p>局部脚本库中的脚本，会随角色卡一同导出。</p><p>功能按钮：</p><ul><li>开关：控制脚本的运行</li><li>信息：查看脚本作者编写的脚本说明</li><li>编辑：修改脚本内容</li><li>移动：移动到另一作用范围的脚本库</li><li>导出：导出脚本配置</li><li>删除：移除脚本</li></ul><h2 id="脚本编辑" tabindex="-1">脚本编辑 <a class="header-anchor" href="#脚本编辑" aria-label="Permalink to &quot;脚本编辑&quot;">​</a></h2><p><img src="'+u+'" alt="脚本编辑"></p><h3 id="脚本内容" tabindex="-1">脚本内容 <a class="header-anchor" href="#脚本内容" aria-label="Permalink to &quot;脚本内容&quot;">​</a></h3><ul><li>使用 JavaScript 编写具体的脚本逻辑</li><li>支持完整的 JavaScript 语法</li><li>可以调用酒馆助手提供的 API 和功能，参考功能详情部分</li></ul>',12)),a("div",m,[i[5]||(i[5]=a("p",{class:"custom-block-title"},"提示",-1)),a("ul",null,[i[3]||(i[3]=a("li",null,[l("脚本可以直接使用jQuery的"),a("code",null,"$"),l("符号控制SillyTavern主界面的DOM元素。")],-1)),a("li",null,[i[1]||(i[1]=l("可以直接使用的库可在")),e(n,{href:"/JS-Slash-Runner-Doc/guide/功能详情/其他辅助功能/内置第三方库.html"},{default:t(()=>i[0]||(i[0]=[l("内置第三方库")])),_:1}),i[2]||(i[2]=l("中查看，无需重复安装。"))]),i[4]||(i[4]=a("li",null,[l("如果要在脚本关闭时执行功能，请使用"),a("code",null,"$('unload',()=>{})"),l("。")],-1))])]),i[10]||(i[10]=s('<h3 id="作者备注" tabindex="-1">作者备注 <a class="header-anchor" href="#作者备注" aria-label="Permalink to &quot;作者备注&quot;">​</a></h3><ul><li>可以添加脚本的说明文档</li><li>支持简单的 markdown 和 html 格式</li><li>建议包含以下信息： <ol><li>脚本功能说明</li><li>使用方法</li><li>版本信息</li><li>更新记录</li><li>注意事项</li></ol></li></ul><h3 id="按键绑定" tabindex="-1">按键绑定 <a class="header-anchor" href="#按键绑定" aria-label="Permalink to &quot;按键绑定&quot;">​</a></h3><p>可以为脚本添加按键绑定，当按下指定按键时，会触发脚本运行。</p><p><img src="'+k+'" alt="按键触发"></p><h4 id="ui说明" tabindex="-1">UI说明 <a class="header-anchor" href="#ui说明" aria-label="Permalink to &quot;UI说明&quot;">​</a></h4><ul><li>拖动控件：对按键的顺序进行调整</li><li>复选框：是否显示按键</li><li>输入框：按键上显示的名称</li><li>删除按钮：删除按键</li></ul><h4 id="绑定方法" tabindex="-1">绑定方法 <a class="header-anchor" href="#绑定方法" aria-label="Permalink to &quot;绑定方法&quot;">​</a></h4>',8)),a("p",null,[i[7]||(i[7]=l("按键绑定功能需要配合 ")),e(n,{href:"/JS-Slash-Runner-Doc/guide/功能详情/监听和发送事件.html#eventonbutton"},{default:t(()=>i[6]||(i[6]=[a("code",null,"eventOnButton",-1)])),_:1}),i[8]||(i[8]=l(" 使用，在脚本中添加以下代码："))]),i[11]||(i[11]=s(`<div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eventOnButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button_name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在这里编写按键触发后的具体逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;按键被点击&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p><code>button_name</code> 需要与设置的按键名称一致。</p></div><h2 id="内置脚本库" tabindex="-1">内置脚本库 <a class="header-anchor" href="#内置脚本库" aria-label="Permalink to &quot;内置脚本库&quot;">​</a></h2><p>扩展内置的脚本，可直接添加到脚本库中使用。</p><p><img src="`+E+'" alt="内置脚本库"></p>',5))])}const P=r(c,[["render",b]]);export{f as __pageData,P as default};
